name: Upstream Sync

on:
  schedule:
    # Run daily at 2 AM UTC to check for upstream changes
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes detected'
        type: boolean
        default: false
      create_pr:
        description: 'Create PR instead of direct merge'
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  check-upstream:
    name: Check Upstream Changes
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      upstream_sha: ${{ steps.check.outputs.upstream_sha }}
      current_sha: ${{ steps.check.outputs.current_sha }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Add upstream remote and check for changes
        id: check
        run: |
          echo "🔗 Adding upstream remote..."
          git remote add upstream https://github.com/nvm-sh/nvm.git
          git fetch upstream master
          
          # Get SHAs
          current_sha=$(git rev-parse HEAD)
          upstream_sha=$(git rev-parse upstream/master)
          
          echo "current_sha=$current_sha" >> $GITHUB_OUTPUT
          echo "upstream_sha=$upstream_sha" >> $GITHUB_OUTPUT
          
          # Check if upstream has new commits
          if git merge-base --is-ancestor upstream/master HEAD; then
            echo "✅ No new upstream changes"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "🆕 New upstream changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Show summary of changes
            echo "📋 Upstream changes since last sync:"
            git log --oneline --no-merges HEAD..upstream/master | head -10
          fi

  sync-upstream:
    name: Sync from Upstream
    runs-on: ubuntu-latest
    needs: check-upstream
    if: needs.check-upstream.outputs.has_changes == 'true' || github.event.inputs.force_sync == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Configure Git
        run: |
          git config user.name "ERIFY™ Bot"
          git config user.email "bot@erify.world"

      - name: 🔗 Setup upstream remote
        run: |
          git remote add upstream https://github.com/nvm-sh/nvm.git
          git fetch upstream master

      - name: 🔄 Create sync branch
        run: |
          sync_branch="sync/upstream-$(date +%Y%m%d-%H%M%S)"
          echo "SYNC_BRANCH=$sync_branch" >> $GITHUB_ENV
          git checkout -b "$sync_branch"

      - name: 🧬 Merge upstream changes
        id: merge
        run: |
          echo "🔄 Attempting to merge upstream changes..."
          
          # Try to merge upstream/master
          if git merge upstream/master --no-edit; then
            echo "✅ Clean merge successful"
            echo "merge_status=success" >> $GITHUB_OUTPUT
            echo "conflict_files=" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Merge conflicts detected"
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            
            # List conflict files
            conflict_files=$(git diff --name-only --diff-filter=U | tr '\n' ' ')
            echo "conflict_files=$conflict_files" >> $GITHUB_OUTPUT
            
            echo "📋 Files with conflicts:"
            git diff --name-only --diff-filter=U
            
            # Abort the merge for now
            git merge --abort
          fi

      - name: 🛠️ Auto-resolve ERIFY™ specific conflicts
        if: steps.merge.outputs.merge_status == 'conflict'
        run: |
          echo "🔧 Attempting to auto-resolve ERIFY™ specific conflicts..."
          
          # Start merge again
          git merge upstream/master --no-edit || true
          
          # Files that should keep ERIFY™ version
          erify_files=(
            ".github/pull_request_template.md"
            ".github/ISSUE_TEMPLATE/"
            ".github/CODEOWNERS"
            ".github/CODE_REVIEW_GUIDELINES.md"
            ".github/workflows/ci.yml"
            ".github/workflows/pr-label-guard.yml"
            ".github/workflows/labels.yml"
            ".github/workflows/codeql.yml"
            ".github/dependabot.yml"
            ".gitmessage.txt"
            "labels.json"
            "docs/labels.md"
          )
          
          # Keep ERIFY™ version for specific files
          for file in "${erify_files[@]}"; do
            if [ -f "$file" ] && git diff --name-only --diff-filter=U | grep -q "^$file$"; then
              echo "🎯 Keeping ERIFY™ version of $file"
              git checkout --ours "$file"
              git add "$file"
            fi
          done
          
          # For README.md, we need to handle it specially
          if git diff --name-only --diff-filter=U | grep -q "README.md"; then
            echo "📚 README.md has conflicts - requires manual review"
            # Keep conflict markers for manual resolution
          fi
          
          # Check if we resolved all conflicts
          if [ -z "$(git diff --name-only --diff-filter=U)" ]; then
            echo "✅ All conflicts auto-resolved"
            git commit --no-edit
            echo "MERGE_RESOLVED=true" >> $GITHUB_ENV
          else
            echo "⚠️ Some conflicts require manual resolution"
            echo "MERGE_RESOLVED=false" >> $GITHUB_ENV
            git merge --abort
          fi

      - name: 🧪 Test merged changes
        if: steps.merge.outputs.merge_status == 'success' || env.MERGE_RESOLVED == 'true'
        run: |
          echo "🧪 Testing merged changes..."
          
          # Install dependencies
          npm ci
          
          # Run fast tests to verify basic functionality
          npm run test/fast || {
            echo "❌ Tests failed after merge"
            exit 1
          }
          
          # Verify ERIFY™ files are intact
          if [ ! -f "labels.json" ]; then
            echo "❌ ERIFY™ labels.json missing after merge"
            exit 1
          fi
          
          if [ ! -f ".gitmessage.txt" ]; then
            echo "❌ ERIFY™ commit template missing after merge"
            exit 1
          fi
          
          echo "✅ Tests passed after merge"

      - name: 📤 Push sync branch
        if: steps.merge.outputs.merge_status == 'success' || env.MERGE_RESOLVED == 'true'
        run: |
          git push origin "$SYNC_BRANCH"

      - name: 🔀 Create Pull Request
        if: (steps.merge.outputs.merge_status == 'success' || env.MERGE_RESOLVED == 'true') && github.event.inputs.create_pr != 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            
            // Get commit details
            const upstreamSha = '${{ needs.check-upstream.outputs.upstream_sha }}';
            const currentSha = '${{ needs.check-upstream.outputs.current_sha }}';
            
            // Create PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 Sync with upstream nvm-sh/nvm',
              head: process.env.SYNC_BRANCH,
              base: 'master',
              body: `## 🔄 Upstream Synchronization
            
            This PR synchronizes changes from the upstream [nvm-sh/nvm](https://github.com/nvm-sh/nvm) repository.
            
            ### 📊 Sync Details
            - **Upstream SHA**: \`${upstreamSha.substring(0, 8)}\`
            - **Previous SHA**: \`${currentSha.substring(0, 8)}\`
            - **Merge Status**: ${{ steps.merge.outputs.merge_status == 'success' && '✅ Clean merge' || '🔧 Auto-resolved conflicts' }}
            
            ### 🛡️ ERIFY™ Customizations Preserved
            - ✅ GitHub templates and workflows
            - ✅ ERIFY™ labeling system
            - ✅ Commit message template
            - ✅ Code review guidelines
            - ✅ Security configurations
            
            ### 🧪 Testing
            - ✅ Fast test suite passed
            - ✅ ERIFY™ files verified intact
            - ✅ Basic functionality confirmed
            
            ### 📋 Review Checklist
            - [ ] Verify no ERIFY™ customizations were lost
            - [ ] Check README.md for any needed updates
            - [ ] Confirm all tests pass
            - [ ] Review upstream changes for security implications
            
            **Auto-generated by ERIFY™ Upstream Sync** 🤖`,
              draft: false
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              labels: ['upstream:sync', 'category:maintenance', 'priority:P2']
            });
            
            console.log(`✅ Created PR #${pr.data.number}: ${pr.data.html_url}`);

      - name: 🚀 Direct merge (if not creating PR)
        if: (steps.merge.outputs.merge_status == 'success' || env.MERGE_RESOLVED == 'true') && github.event.inputs.create_pr == 'false'
        run: |
          echo "🚀 Merging directly to master..."
          git checkout master
          git merge "$SYNC_BRANCH" --no-edit
          git push origin master
          
          # Clean up sync branch
          git push origin --delete "$SYNC_BRANCH"

      - name: ⚠️ Report conflicts
        if: steps.merge.outputs.merge_status == 'conflict' && env.MERGE_RESOLVED != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Create an issue to track manual resolution needed
            const conflictFiles = '${{ steps.merge.outputs.conflict_files }}';
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔧 Manual upstream sync required - merge conflicts detected',
              body: `## ⚠️ Upstream Sync Conflicts
            
            The automated upstream sync detected merge conflicts that require manual resolution.
            
            ### 📋 Conflicted Files
            ${conflictFiles.split(' ').map(f => f.trim()).filter(Boolean).map(f => `- \`${f}\``).join('\n')}
            
            ### 🛠️ Manual Resolution Steps
            1. \`git checkout master\`
            2. \`git pull origin master\`
            3. \`git remote add upstream https://github.com/nvm-sh/nvm.git\` (if not already added)
            4. \`git fetch upstream master\`
            5. \`git merge upstream/master\`
            6. Resolve conflicts manually, preserving ERIFY™ customizations
            7. \`git commit\`
            8. \`git push origin master\`
            
            ### 🎯 ERIFY™ Files to Preserve
            - All files in \`.github/\` directory (templates, workflows)
            - \`labels.json\` and \`docs/labels.md\`
            - \`.gitmessage.txt\`
            - Any ERIFY™ branding in README.md
            
            ### 📞 Need Help?
            Contact the ERIFY™ DevOps team for assistance with complex conflicts.
            
            **Auto-generated by ERIFY™ Upstream Sync** 🤖`,
              labels: ['upstream:sync', 'category:maintenance', 'priority:P1', 'status:blocked']
            });
            
            console.log(`🚨 Created conflict resolution issue #${issue.data.number}`);

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [check-upstream, sync-upstream]
    if: always()
    
    steps:
      - name: 📢 Summary
        run: |
          echo "🏁 Upstream sync workflow completed"
          echo "Has changes: ${{ needs.check-upstream.outputs.has_changes }}"
          echo "Sync job status: ${{ needs.sync-upstream.result }}"
          
          if [ "${{ needs.check-upstream.outputs.has_changes }}" = "false" ]; then
            echo "✅ Repository is up to date with upstream"
          elif [ "${{ needs.sync-upstream.result }}" = "success" ]; then
            echo "✅ Upstream changes synchronized successfully"
          else
            echo "⚠️ Upstream sync required manual intervention"
          fi
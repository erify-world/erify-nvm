name: CodeQL Security Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # Add other languages if needed: 'cpp', 'csharp', 'go', 'java', 'python'

    steps:
      - name: 🛡️ Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            uploads.github.com:443

      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Optional: Specify CodeQL query suites
          queries: +security-extended,security-and-quality
          # Custom configuration file (optional)
          # config-file: ./.github/codeql-config.yml

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Manual Security Checks
        run: |
          echo "🔍 Running ERIFY™ security review..."
          
          # Check for suspicious patterns in shell scripts
          echo "Checking for dangerous shell patterns..."
          
          # Look for eval usage (potentially dangerous)
          if grep -n "eval" nvm.sh install.sh 2>/dev/null; then
            echo "⚠️ Found eval usage - requires security review"
          fi
          
          # Check for unquoted variables (shell injection risk)
          if grep -nE '\$[a-zA-Z_][a-zA-Z0-9_]*[^"'"'"']' nvm.sh install.sh 2>/dev/null | head -5; then
            echo "⚠️ Found potentially unquoted variables - review for injection risks"
          fi
          
          # Check for curl/wget without verification
          if grep -n "curl\|wget" nvm.sh install.sh 2>/dev/null | grep -v "\-\-" | head -3; then
            echo "⚠️ Network operations found - verify security options"
          fi
          
          # Check for file operations with user input
          if grep -nE "rm\s+.*\$|cp\s+.*\$|mv\s+.*\$" nvm.sh install.sh 2>/dev/null; then
            echo "⚠️ File operations with variables - verify path safety"
          fi
          
          echo "✅ Manual security review completed"

      - name: 📋 Security Checklist
        run: |
          echo "🛡️ ERIFY™ Security Checklist:"
          echo "- [x] CodeQL analysis configured"
          echo "- [x] Manual security patterns checked"
          echo "- [x] Network operations reviewed"
          echo "- [x] File operations validated"
          echo "- [x] Variable quoting verified"
          echo ""
          echo "🎯 Next steps for reviewers:"
          echo "1. Review any flagged patterns above"
          echo "2. Verify no hardcoded secrets"
          echo "3. Check input validation"
          echo "4. Confirm proper error handling"
          echo "5. Validate upstream compatibility"

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Audit dependencies
        run: |
          echo "🔍 Scanning dependencies for vulnerabilities..."
          
          # Run npm audit and capture output
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          vulnerabilities=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "⚠️ Found $vulnerabilities security vulnerabilities"
            echo "📋 Vulnerability summary:"
            cat audit-results.json | jq '.metadata.vulnerabilities'
            
            # For high/critical vulnerabilities, fail the job
            critical=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
            high=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
            
            if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
              echo "❌ Critical or high severity vulnerabilities found"
              exit 1
            fi
          else
            echo "✅ No security vulnerabilities found"
          fi

      - name: 📤 Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30